public sealed class SimpleAnonymousTestWrapper
{
	private static System.Collections.Generic.Dictionary<string, Func<object, object>> properties = null;
	
	public SimpleAnonymousTestWrapper(object innerObject)
	{
		if (properties == null)
		{
			properties = new ReadonlyPropertyAccessor()
				.GetProperties(
					innerObject.GetType());
		}

		this.InnerObject = innerObject;
	}

	public object InnerObject { get; set; }
	
	public System.String SimpleProperty1
	{
		get
		{
			return (System.String)GetValue("SimpleProperty1");
		}
	}
	
	public System.Int32 SimpleNumber
	{
		get
		{
			return (System.Int32)GetValue("SimpleNumber");
		}
	}
	
	private object GetValue(string property)
	{
		return properties[property](InnerObject);
	}
}
